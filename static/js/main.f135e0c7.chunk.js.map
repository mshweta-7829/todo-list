{"version":3,"sources":["Todo.js","TodoForm.js","EditableTodo.js","EditableTodoList.js","TodoApp.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","todo","title","description","priority","className","defaultProps","id","TodoForm","initialFormData","handleSave","useState","formData","setFormData","handleChange","evt","target","name","value","onSubmit","preventDefault","placeholder","onChange","aria-label","htmlFor","EditableTodo","update","remove","isEditing","setIsEditing","toggleEdit","handleDelete","console","log","onClick","EditableTodoList","todos","map","key","TodoApp","initialTodos","setTodos","updatedTodo","filter","priorities","topPriority","Math","min","find","getTopTodo","newTodo","uuid","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f135e0c7.chunk.js","sourcesContent":["import React from \"react\";\n\n/** Simple presentation component for a todo.\n *\n * Props:\n * - todo: like { id, title, description, priority }\n *\n * { EditableTodo, TodoApp } -> Todo\n **/\n\nfunction Todo(props) {\n  const { title, description, priority } = props.todo\n  return (\n      <div className=\"Todo\">\n        <div><b>{title}</b> <small>(priority:{priority} )</small></div>\n        <div><small>{description}</small></div>\n      </div>\n  );\n}\n\nTodo.defaultProps = {\n  todo:\n  {id:1,\n  title:\"sampleTitle\", \n  description : \"sampleDescription\", \n  priority : 1}\n  \n}\nexport default Todo;\n","import React, { useState } from \"react\";\n\n\n/** Form for adding.\n *\n * Props:\n * - initialFormData\n * - handleSave: function to call in parent.\n *\n * { TodoApp, EditableTodo } -> TodoForm\n */\n\nfunction TodoForm(props) {\n  const { initialFormData, handleSave } = props\n  const [formData, setFormData] = useState(initialFormData)\n\n  /** Update form input. */\n  function handleChange(evt) { \n    const {name, value} = evt.target\n    \n    setFormData(formData => ({\n      ...formData,\n      [name]: value\n    }))\n  }\n\n  /** Call parent function and clear form. */\n  function handleSubmit(evt) { \n    evt.preventDefault()\n\n    handleSave(formData)\n    setFormData(initialFormData)\n\n  }\n\n  return (\n      <form className=\"NewTodoForm\" onSubmit={handleSubmit}>\n\n        <div className=\"form-group\">\n          <input\n              id=\"newTodo-title\"\n              name=\"title\"\n              className=\"form-control\"\n              placeholder=\"Title\"\n              onChange={handleChange}\n              value={formData.title}\n              aria-label=\"Title\"\n          />\n        </div>\n\n        <div className=\"form-group\">\n          <textarea\n              id=\"newTodo-description\"\n              name=\"description\"\n              className=\"form-control\"\n              placeholder=\"Description\"\n              onChange={handleChange}\n              value={formData.description}\n              aria-label=\"Description\"\n          />\n        </div>\n\n        <div className=\"form-group d-flex justify-content-between\">\n          <div className=\"w-75 d-flex justify-content-between\">\n            <label htmlFor=\"newTodo-priority\"\n                   className=\"d-inline-flex\">Priority:&nbsp;&nbsp;\n            </label>\n            <select id=\"newTodo-priority\"\n                    name=\"priority\"\n                    value={formData.priority}\n                    onChange={handleChange}\n                    className=\"form-control form-control-sm d-inline-flex\"\n            >\n              <option value={1}>Ultra-Über</option>\n              <option value={2}>Über</option>\n              <option value={3}>Meh</option>\n            </select>\n          </div>\n          <button className=\"btn-primary rig btn btn-sm NewTodoForm-addBtn\">\n            Gø!\n          </button>\n        </div>\n\n      </form>\n  );\n}\n\nTodoForm.defaultProps ={\n  initialFormData : {\n                      title:\"\", \n                      description:\"\", \n                      priority :\"\"}\n}\nexport default TodoForm;\n","import React, { useState } from \"react\";\nimport Todo from \"./Todo\";\nimport TodoForm from \"./TodoForm\";\n\n/** Show editable todo item.\n *\n * Props\n * - todo\n * - update(): fn to call to update a todo\n * - remove(): fn to call to remove a todo\n *\n * EditableTodoList -> EditableTodo -> { Todo, TodoForm }\n */\n\n//Add comments : state\nfunction EditableTodo(props) {\n  const { todo, update, remove } = props\n  const [isEditing, setIsEditing] = useState(false)\n\n  /** Toggle if this is being edited */\n  function toggleEdit() {\n    setIsEditing(true)\n  }\n\n  /** Call remove fn passed to this. */\n  function handleDelete() {\n    remove(todo.id)\n  }\n\n  /** Edit form saved; toggle isEditing and update in ancestor. */\n  function handleSave(formData) { \n    console.log(\"calling handle save\")\n    update(formData)\n    setIsEditing(false)\n  }\n\n\n  function showEditableTodosOrFormToEdit() {\n    if (isEditing) {\n      return (\n        <div>\n          <TodoForm initialFormData={todo} handleSave={handleSave} />\n        </div>\n      )\n    } else {\n      return (\n        <div className=\"mb-3\">\n          <div className=\"float-right text-sm-right\">\n            <button\n              className=\"EditableTodo-toggle btn-link btn btn-sm\"\n              onClick={toggleEdit}>\n              Edit\n                    </button>\n            <button\n              className=\"EditableTodo-delBtn btn-link btn btn-sm text-danger\"\n              onClick={handleDelete}>\n              Del\n                    </button>\n          </div>\n          <Todo todo={todo} />\n        </div>\n      )\n    }\n  }\n\nreturn (\n     <div className=\"EditableTodo\">\n       {showEditableTodosOrFormToEdit()}\n     </div>\n  );\n}\n\n\nexport default EditableTodo;\n","import React from \"react\";\nimport EditableTodo from \"./EditableTodo\";\n\n/** Show list of editable todos.\n *\n * Props:\n * - todos: array of [ todo, ... ]\n * - update(): fn to call to update a todo\n * - remove(): fn to call to remove a todo\n *\n * TodoApp -> EditableTodoList -> [ EditableTodo, ... ]\n */\n\nfunction EditableTodoList(props) {\n  const { todos, update, remove } = props\n\n  function showEditableList() {\n    return (\n      <div>\n        {todos.map(todo => (\n          <div key={todo.id}>\n            <EditableTodo\n              todo={todo}\n              update={update}\n              remove={remove} />\n          </div>\n        ))}\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"TodoList\">\n      <h3 className=\"mb-3\">Todos</h3>\n      {showEditableList()}\n    </div>\n  );\n}\n\nexport default EditableTodoList;\n","import React, { useState } from \"react\";\nimport uuid from \"uuid/v4\";\n\nimport EditableTodoList from \"./EditableTodoList\";\nimport TodoForm from \"./TodoForm.js\";\nimport Todo from \"./Todo.js\"\n\n/** App for managing a todo list.\n *\n * Props:\n * - initialTodos: possible array of [ todo, ... ]\n *\n * State:\n * - todos: array of [ todo, ... ]\n *\n * App -> TodoApp -> { TodoForm, EditableTodoList }\n */\n\nfunction TodoApp(props) {\n  const { initialTodos } = props\n  const [todos, setTodos] = useState(initialTodos)\n\n  /** add a new todo to list */\n  //TODO: use uuid\n  function create(todo) {\n    const newTodo = { ...todo, id: uuid() }\n    setTodos(todos => [...todos, newTodo]);\n  }\n\n  /** update a todo with updatedTodo */\n  function update(updatedTodo) {\n    setTodos(todos => \n      todos.map(todo => {\n        if (todo.id === updatedTodo.id)\n          return updatedTodo\n        else\n          return todo\n      })\n    )\n  }\n\n  /** delete a todo by id */\n  function remove(id) {\n    setTodos(todos.filter(todos => todos.id !== id))\n  }\n\n  /** get highest-priority todo */\n  function getTopTodo() {\n\n    const priorities = todos.map(todo => todo.priority)\n    const topPriority = Math.min(...priorities)\n    const topTodo = todos.find(todo => todo.priority === topPriority)\n    return topTodo\n  }\n\n  return (\n    <main \n    className=\"TodoApp\">\n      <div className=\"row\">\n        <div className=\"col-md-6\">\n          <EditableTodoList todos={todos} update={update} remove={remove} />\n        </div>\n        <div className=\"col-md-6\">\n          <section className=\"mb-4\">\n            <h3>Top Todo</h3>\n            <Todo todo={getTopTodo()} />\n          </section>\n          <section>\n            <h3 className=\"mb-3\">Add New Todo</h3>\n            <TodoForm handleSave={create} />\n          </section>\n        </div>\n      </div>\n\n    </main>\n  );\n}\n\nexport default TodoApp;","import React from \"react\";\nimport TodoApp from \"./TodoApp\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./App.css\";\n\n/** Site application.\n *\n * App -> TodoApp\n **/\n\nfunction App() {\n  return (\n      <main className=\"App\">\n        <header className=\"container=fluid pt-4 pb-1\">\n          <div className=\"container\">\n            <h1>My Todo List</h1>\n          </div>\n        </header>\n\n        <section className=\"container mt-4\">\n          <TodoApp initialTodos={[\n            {\n              id: 1,\n              title: \"Code!\",\n              description: \"Write some code\",\n              priority: 2,\n            },\n            {\n              id: 2,\n              title: \"Make dinner\",\n              description: \"Cook something healthy\",\n              priority: 1,\n            },\n            {\n              id: 3,\n              title: \"Go to bed\",\n              description: \"In bed by 11:15\",\n              priority: 3,\n            },\n          ]} />\n\n        </section>\n      </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}